Status:

 - looking at sparse implementation of softmax....but it doesn't seem
   to be differentiable the way I set it up. can it be? maybe I should
   be using a sampling softmax? or nce_loss?

EASY:

 Need to test!
 -- db.schema.serializeTo(filelike)
 -- db.serializeTo(filelike,filter=None|params|noparams)

 - alternative to calling out to tensorlog would be to
 iteratively process multiple-input, single-output plugins.
 for i in plugInGoalPositions:
   compile opsequence for A<=B1,...,B[i-1]
   add op to compute output of B[i] from input
   syntactic rule: links in polytree cannot cross boundaries
    defined by plugin literals

- having multiple inputs in bpcompiler would also be nice....
 hard would this be to do?

    person_t, movie_t, word_t = b.types("person_t movie_t word_t)
    starred_in,directed_by = b.predicate("starred_in directed_by")
    b.rules += ... 
    b.schema += starred_in(person_t,movie_t)  # define one of these for each DB predicate
    b.schema += weight(ruleid_t)
    b.schema = None # for typeless
    b.constants += 'r1'
    b.rules += (a <= ..... // weight('r1'))
    b.db += 'file.tsv'  # why not just do this, and not have a separate "builder"

 - autoset_db_params: schema predicates can be marked 'trainable' when you
 declare their types, OR will be automarked if they appear after a //
 - tlog(autoset_db_params=True) will only set UNDEFINED params
 - you can load just parameters, not a whole DB

 - Should I switch from comline to gflags?


Cleanup:
 - clean up mutil: densify
 - clean up dataset: matrix examples (done?) and proppr nonsense (move proppr to extras)
 - clean up funs, ops: refactor bprop and eval into 'native'
 - clean up program: autoweighting, ProPPRProgram vs program

__init__.py
test (2k lines)
  benchmark.py
  testtensorlog.py
  testxcomp.py
core: (maybe 2k lines)
  bpcompiler.py
  comline.py - should add my super simple option holder
  config.py
  dataset.py
  declare.py - do I really need something so complicated as a Goal?
  funs.py - a lot is backprop or eval
  masterconfig.py
  matrixdb.py
  ops.py - a lot is backprop or eval
  parser.py - 200 lines and do I need it?
  program.py - autoweighting
  symtab.py - should start at 0 or 1? do I need reserved words?
  simple.py
  tensorflowxcomp.py - *Function, *Grad, runExpt and support is test, this is a few hundred lines
  theanoxcomp.py - *Function, *Grad, runExpt and support is test
  xcomp.py - *Function, ...
  opfunutil.py - scratchpad crap
extra (200)
  interp.py
  list.py
native (1500)
  learn.py
  debug.py
  expt.py
  plearn.py
  putil.py
  mutil.py - shuffleRows, selectRows used in dataset only; stack, numRows and checkCSR a lot; mapData a lot,
    mostly for clipping; but it's ony 300 lines or so

