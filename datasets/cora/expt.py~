import tensorlog
import declare
import learn
import time

if __name__=="__main__":
    mode = declare.ModeDeclaration('samebib(i,o)')
    ti = tensorlog.Interp(initFiles=["cora.cfacts","cora.ppr"])
    #keyword relations are also params
    ti.db.markAsParam('kaw',1)
    ti.db.markAsParam('ktw',1)
    ti.db.markAsParam('kvw',1)
#    ti.list("i_hypernym/io")
    print 'preparing training data'
    start = time.time()
    TX,TY = ti.db.matrixAsTrainingData('train_samebib',2)
    print 'prepared in %.3f sec' % (time.time()-start)
    learner = learn.FixedRateGDLearner(ti.prog,TX,TY,epochs=5)
    print 'testing initial untrained theory'
    start = time.time()
    P0 = learner.predict(mode,TX)
    print 'tested in %.3f sec' % (time.time()-start)
    acc0 = learner.accuracy(TY,P0)
    xent0 = learner.crossEntropy(TY,P0)
    print 'untrained: acc0',acc0,'xent0',xent0

    print 'training..'
    start = time.time()
    learner.train(mode)
    print 'trained in %.3f sec' % (time.time()-start)    
    print 'testing trained theory on training data'
    start = time.time()
    P1 = learner.predict(mode,TX)
    print 'tested in %.3f sec' % (time.time()-start)
    acc1 = learner.accuracy(TY,P1)
    xent1 = learner.crossEntropy(TY,P1)
    print 'untrained: acc',acc1,'xent',xent1

    print 'preparing testing data'
    start = time.time()
    UX,UY = ti.db.matrixAsTrainingData('test_samebib',2)
    print 'prepared in %.3f sec' % (time.time()-start)
    print 'testing trained theory on test data'
    start = time.time()
    P2 = learner.predict(mode,UX)
    print 'tested in %.3f sec' % (time.time()-start)
    accu = learner.accuracy(UY,P2)
    xentu = learner.crossEntropy(UY,P2)
    print 'trained: acc',accu,'xent',xentu

    print 'saving db...'
    start = time.time()
    ti.db.serialize('trained.db')
    print 'saved in  %.3f sec' % (time.time()-start)
