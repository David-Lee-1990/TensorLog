BASICS

A Tensorlog DATABASE is holds a bunch of unary and binary relations,
which are encoded as scipy sparse matrixes.  The human-readable format
for this is a set of files with the .cfacts extension.  Some examples,
from src/test/textcattoy.cfacts:

 hasWord	dh	a
 hasWord	dh	pricy
 hasWord	dh	doll
 hasWord	dh	house
 hasWord	ft	a
 hasWord	ft	little
 hasWord	ft	red
 hasWord	ft	fire
 hasWord	ft	truck
 ...
 label	pos	
 label	neg

The columns are: predicate name, argument 1, and (optionall, for
binary predicates) argument 2.  An additional column can be added
which is a numeric weight (so don't use any constant that parses to a
number in a cfacts file to avoid program confusion - or if you do then
set matrixdb.conf.allow_weighted_tuples = False.)  You need to group
facts with the same predicate together.

Typing: You can optionally add type declarations in a cfacts file,
like this:

# :- predict(doc,label)
# :- hasWord(doc,word)
# :- posPair(word,labelWordPair)
# :- label(label)

This will basically put the constants of type 'doc', 'label', etc in
different namespaces.  Types are all disjoint. You should either type
everything or nothing (in the latter case, everything is a default
type __THING__).

A database can be SERIALIZED and should be stored in a directory with
extension .db.

A Tensorlog PROGRAM usually has extension .ppr.  Some examples:

------------------------------------------------------------------------------
 predict(X,Pos) :- assign(Pos,pos) {all(F): hasWord(X,W),posPair(W,F)}.
 predict(X,Neg) :- assign(Neg,neg) {all(F): hasWord(X,W),negPair(W,F)}.
 
 match(R,S) :- fname(R,FR),fmatch(FR,FS),fname(S,FS) {f}.
 match(R,S) :- lname(R,LR),lmatch(LR,LS),lname(S,LS) {l}.
 match(R,S) :- addr(R,AR),amatch(AR,AS),addr(S,AS) {a}.
------------------------------------------------------------------------------

Typing: you can use assign(Var,const,type) to if you're using types: eg,

 predict(X,Pos) :- assign(Pos,pos,label) {all(F): hasWord(X,W),posPair(W,F)}.

If you use the ProPPR-style rule features (in the curly braces) you
should 
 - make sure any constants appearing there are in the database
 - load the rule file as 'proppr' format, which is NOT the default.
There's no serialized form of a program.  

A Tensorlog DATASET is given in a file .exam with lines of the form "P
<tab> X <tab> Y1 <tab> Yk" where

 - P is the functor of some predicate defined in your program
 - X is an input
 - Y1...Yk are ALL the outputs for X that are considered correct

Eg, this dataset essentially labels match(r1,r2) and match(r1,r1) as
positive, and any other fact match(r1,foo) as negative.  The constant
r3 should only match itself:

----------------------------------------
 match	r1	r2	r1
 match	r3	r3
 ....
----------------------------------------

Typing: if want to use typed database relations the relation (eg
match) in the exam file should also be typed, so you need a type
declaration for it in the cfacts file.

A serialized dataset has extension .dset.


HOW TO RUN AN EXPERIMENT:

Look at the sample main in src/expt.py, and the sample input files in
src/test/textcattoy.cfacts and src/test/textcat.ppr.  Some other
larger examples are in datasets/cora/cora-expt.py and
datasets/wordnet/wnet-expt.py.


HOW TO CONFIGURE TENSORLOG:

Some of the modules have a config.Config() object, which is just an
object that contains fields which can be used as options.  Any
user-settable parameters should be in these objects.

HOW TO SERIALIZE A .cfacts FILE AND CREATE A DB FILE:

  % python matrixdb.py --serialize foo.cfacts foo.db

HOW TO DEBUG A TENSORLOG PROGRAM:

Start up an interpreter with the command

  % python -i -m tensorlog --programFiles foo.db:foo.ppr:foo.cfacts:...

You can then evaluate functions with commands like:

 % ti.eval("foo/io", "input_constant")

Try setting these config options before you do 

  ops.trace = True
  conf.trace = True

You can also insert "printf literals" into a clause, eg

  p(X,Z1):-printf(X,X1),spouse(X1,Y),printf(Y,Y1),sister(Y1,Z),printf(Z,Z1).

These literals just copy the input to the output, but will echo the
bindings of the variables when the message-passing happens.  (Make
sure the output variable of the printf is used somewhere "downstream",
otherwise it's undefined when the print will actually happen.)

Finally there is the debug.py module, which contains a start at a
graphical debugger.

