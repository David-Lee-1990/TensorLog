TODO: 

 - check y - p vs p - y in tensorlog (and gradient sign)
 - check family dataset
 - check subfunction reuse in grid
 - DOCUMENT: add ruleid-listing routine in list
 - add __repr__ functions for learners so you can echo them in expt
 - DOCUMENT: options --savedModel, --targetMode,
   --savedTestPredictions, --savedTestExamples, savedTrainExamples for
   expt

 - DOCUMENT: replace {all(f):....} with {weighted(F):...}
 so textcat can be "predict(X,Y) :- assign(Y,pos) { posWeight(F):hasWord(X,F) }."
 - DOCUMENT: prog.setFeatureWeights(), prog.setRuleWeights
 - note: {r} is short for {weighted(R):assign(R,r)}

 - cleanup gradient stuff:
 -- plearn tasks should postprocess the parameters via rowsum for the paramGrad weights - sort of like a combiner
 -- plearn postprocessing should do weighted average of the gradients - maybe do with with a bunch of pairwise addition tasks?

 - need to test Adagrad on real data
   - update: regularization runs but it possibly broken

 - faster database loader/fact buffer flushing
 - think about typed predicates and dense matrices
 -- maybe extend env so that env.matrixType[v] indicates type: sparse or dense+offset
 -- have ops dispatch to the correct operator as appropriate

 -- rather than types, I could just read in all constants in order so that
 you can group similar-typed ones together (eg, have 'foo.order' be 
 an extra input in programFiles and add a bit to the matrixdb to 
 loadConstants)

TUTORIAL/DOCS

  see wiki

TODO: Thinking thru functions and re-use: I'm not sure that re-used functions are handled properly.
They cache their outputs so if they are called multiple times at the same level with different
inputs we really need a copy of each instance. Proposed test case:

 	 p(X,Y) :- q(X,Y),r(Y,Z),r(X,W).
	 q(a,b)
	 r(X,Y) :- s(X,Y).  # so it's a re-used function
	 s(a,c). s(b,c).

BUGS: 

 - head p(X,X) doesn't work

DESIGN FLAWS: 1 fails but 2 is ok even tho both are polytrees.

 1 p(X,Y) :- q(X,X1),r(Y,Y1),s(X1,Y1)
 2 p(X,Y) :- q(X,X1),s(X1,Y1),r(Y,Y1)

EXTENSIONS:
 - throw sensible error when a novel rule constant is seen

config:
 - might want to include, in config.py, an overall 'top' configuration
 which includes the others as subconfigurations.  also might want to
 serialize/deserialize them.

learning:
 - serializable multi-task datasets
  propprExamplesAsData(db,fileName): convert to provide (xdict,ydict) outputs
 - adagrad & holdout set for convergence

MORE EXPERIMENTS:

 - Rose's representation learning/recommendation
 - SSL

